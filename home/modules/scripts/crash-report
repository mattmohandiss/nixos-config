#!/usr/bin/env bash

# This script must be run with sudo
if [ "$EUID" -ne 0 ]; then
    echo "Please run this script with sudo."
    exit 1
fi

# Comprehensive Crash Analysis Script for NixOS
# Generates a report for AI-powered diagnosis of sudden shutdowns.

# --- Functions ---

# Adds a formatted section header to the report.
add_section() {
    local title="$1"
    echo ""
    echo "================================================================================="
    echo "  $title"
    echo "================================================================================="
    echo ""
}

# Reads and clears logs from the kernel's persistent storage (pstore).
add_pstore_logs() {
    local pstore_dir="/sys/fs/pstore"
    if [ -d "$pstore_dir" ] && [ -n "$(ls -A $pstore_dir 2>/dev/null)" ]; then
        echo "--- Persistent Crash Logs (pstore) ---"
        echo "Found previous kernel crash logs. This is strong evidence of a panic or oops."
        echo ""
        bash -c '
            for file in /sys/fs/pstore/*; do
                echo "Log file: $file"
                echo "--- BEGIN LOG ---"
                cat "$file"
                echo "--- END LOG ---"
                # Remove the file after reading to prevent old logs from reappearing
                echo "Removing log file: $file"
                rm "$file"
            done
        '
        echo ""
    else
        echo "--- Persistent Crash Logs (pstore) ---"
        echo "No persistent crash logs found in /sys/fs/pstore."
        echo ""
    fi
}

# Runs a command and prints its output to the report.
run_cmd() {
    local cmd="$1"
    local description="$2"

    echo "--- $description ---"
    echo "Command: $cmd"
    echo "Output:"
    if ! timeout 30 bash -c "$cmd"; then
        echo "  [ERROR] Command failed to execute or timed out."
    fi
    echo ""
}

# --- Report Generation ---

echo "NixOS Crash Analysis Report"
echo "Generated: $(date)"
echo "Hostname: $(hostname)"
echo "User: $(whoami)"
echo "Kernel: $(uname -r)"
echo "Uptime: $(uptime)"

add_section "KERNEL AND SYSTEM ERRORS"
add_pstore_logs
run_cmd "journalctl -k -b -1 --no-pager | grep -i -E '(panic|oops|segfault|killed|oom|thermal|mce|hardware error)' | tail -20" "Critical kernel messages from previous boot"
run_cmd "journalctl -b -1 --no-pager | grep -i -E '(error|fail|panic|crash|segfault|killed)' | tail -20" "Previous boot error messages"
run_cmd "journalctl -b -1 --no-pager | tail -100" "Previous boot final 100 log entries"

add_section "APPLICATION CRASH ANALYSIS"
run_cmd "coredumpctl list -b -1 --no-pager" "Application coredumps from previous boot"

add_section "HARDWARE HEALTH ANALYSIS"
run_cmd "ras-mc-ctl --summary" "RAS daemon summary (CPU/Memory Errors)"
run_cmd "sensors" "All temperature readings"
run_cmd "smartctl -a /dev/nvme0n1" "NVMe drive health"
run_cmd "cat /proc/loadavg" "System load averages"

add_section "POWER AND BATTERY ANALYSIS"
run_cmd "acpi -V" "Complete ACPI power status"
run_cmd "upower -i $(upower -e | grep 'BAT')" "Detailed battery health and status"
run_cmd "cat /sys/class/power_supply/BAT*/cycle_count" "Battery cycle count"

add_section "GRAPHICS AND WAYLAND ANALYSIS"
run_cmd "journalctl -b -1 --no-pager | grep -i -E '(drm|i915|gpu|graphics)' | tail -15" "Graphics driver messages from previous boot"
run_cmd "journalctl -b -1 --no-pager | grep -i -E '(niri|wayland|compositor)' | tail -10" "Wayland compositor journal entries from previous boot"

echo "--- End of Report ---"